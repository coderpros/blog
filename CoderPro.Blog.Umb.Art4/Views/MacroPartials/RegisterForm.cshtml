@inherits Umbraco.Web.Macros.PartialViewMacroPage
@using System.Web.Mvc.Html
@using Umbraco.Web
@using Umbraco.Web.Controllers

@{
    var registerModel = Members.CreateRegistrationModel();
    registerModel.LoginOnSuccess = true;
    registerModel.UsernameIsEmail = true;
    registerModel.RedirectUrl = "/";

    var success = TempData["FormSuccess"] != null;
}

@if (success) //BUG This is a bug that I have reported to Umbraco and will fix for them.
{
    <p>>Thank you for registering!</p>
}
else
{
    using (Html.BeginUmbracoForm<UmbRegisterController>
            ("HandleRegisterMember"))
    {
        <div class="container">
            <fieldset>
                @Html.ValidationSummary("registerModel", true)

                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(m => registerModel.Name)
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.TextBoxFor(m => registerModel.Name, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => registerModel.Name)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(m => registerModel.Email)
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.TextBoxFor(m => registerModel.Email, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => registerModel.Email)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(m => registerModel.Password)
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.PasswordFor(m => registerModel.Password)
                            @Html.ValidationMessageFor(m => registerModel.Password)
                        </div>
                    </div>
                </div>

                @if (registerModel.MemberProperties != null)
                {
                    @*
                        It will only displays properties marked as "Member can edit" on the "Info" tab of the Member Type.
                    *@
                    for (var i = 0; i < registerModel.MemberProperties.Count; i++)
                    {
                        @Html.LabelFor(m => registerModel.MemberProperties[i].Value, registerModel.MemberProperties[i].Name)
                        @*
                            By default this will render a textbox but if you want to change the editor template for this property you can
                            easily change it. For example, if you wanted to render a custom editor for this field called "MyEditor" you would
                            create a file at ~/Views/Shared/EditorTemplates/MyEditor.cshtml", then you will change the next line of code to
                            render your specific editor template like:
                            @Html.EditorFor(m => profileModel.MemberProperties[i].Value, "MyEditor")
                        *@
                        @Html.EditorFor(m => registerModel.MemberProperties[i].Value)
                        @Html.HiddenFor(m => registerModel.MemberProperties[i].Alias)
                        <br />
                    }
                }

                @Html.HiddenFor(m => registerModel.MemberTypeAlias)
                @Html.HiddenFor(m => registerModel.RedirectUrl)
                @Html.HiddenFor(m => registerModel.UsernameIsEmail)
                <div class="row">
                    <div class="col-md-12">
                        <button type="submit" class="btn btn-primary">Register</button>
                    </div>
                </div>
            </fieldset>
        </div>
    }
}